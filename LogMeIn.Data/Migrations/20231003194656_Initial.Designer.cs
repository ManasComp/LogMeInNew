// <auto-generated />
using System;
using LogMeIn.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogMeIn.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231003194656_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogMeIn.Models.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Breeder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Draft")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Breeders");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Cat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Breed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PedigreeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("TitleAfterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBeforeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cat");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Cat");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogMeIn.Models.Models.CatRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatId")
                        .HasColumnType("int");

                    b.Property<int>("CatOrder")
                        .HasColumnType("int");

                    b.Property<int>("LastStep")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonRegistrationId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CatId")
                        .IsUnique();

                    b.HasIndex("PersonRegistrationId");

                    b.ToTable("CatRegistrations");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Day<LogMeIn.Models.Models.CatRegistration>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<bool>("Visited")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Day<CatRegistration>");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.EnumFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("EnumFees");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            ExhibitionId = 1,
                            Name = "Propagace vystavovatele",
                            Type = 2
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.EnumRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceEur")
                        .HasColumnType("float");

                    b.Property<double>("PriceKc")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.ToTable("EnumRecords");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Default = false,
                            FeeId = 4,
                            Name = "Propagace na celou A4",
                            PriceEur = 0.0,
                            PriceKc = 500.0
                        },
                        new
                        {
                            Id = 6,
                            Default = true,
                            FeeId = 4,
                            Name = "Žádná propagace",
                            PriceEur = 0.0,
                            PriceKc = 0.0
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Exhibitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            EndDate = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            LocationId = 1,
                            Name = "XV. a XVI. Mezinárodní kočičí výstava",
                            OrganizationId = 1,
                            RegistrationEnd = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2023, 11, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://www.schk.cz/files/ko-kyBrno2023.pdf"
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("DefaultBought")
                        .HasColumnType("bit");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<string>("JavascriptId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("Fees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultBought = true,
                            ExhibitionId = 1,
                            JavascriptId = "sturdyFee",
                            Name = "Mám sturdy klec větší než 60x60",
                            Order = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            DefaultBought = true,
                            ExhibitionId = 1,
                            JavascriptId = "ownCage",
                            Name = "Mám vlastní klec",
                            Order = 0,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            DefaultBought = true,
                            ExhibitionId = 1,
                            JavascriptId = "doubleCage",
                            Name = "Dvojitá klec",
                            Type = 0
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.FeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<double>("PriceEur")
                        .HasColumnType("float");

                    b.Property<double>("PriceKc")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.ToTable("FeeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeeId = 1,
                            MaxCount = 1,
                            MinCount = 1,
                            PriceEur = 4.0,
                            PriceKc = 300.0
                        },
                        new
                        {
                            Id = 2,
                            FeeId = 2,
                            MaxCount = 1,
                            MinCount = 1,
                            PriceEur = 0.0,
                            PriceKc = 0.0
                        },
                        new
                        {
                            Id = 3,
                            FeeId = 3,
                            MaxCount = 1,
                            MinCount = 1,
                            PriceEur = 4.0,
                            PriceKc = 300.0
                        },
                        new
                        {
                            Id = 4,
                            FeeId = 3,
                            MaxCount = 2,
                            MinCount = 2,
                            PriceEur = 4.0,
                            PriceKc = 600.0
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.FeeEntranceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfCats")
                        .HasColumnType("int");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<int>("MinNumberOfCats")
                        .HasColumnType("int");

                    b.Property<double>("PriceEur")
                        .HasColumnType("float");

                    b.Property<double>("PriceKc")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("FeeEntranceDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExhibitionId = 1,
                            MaxCount = 1,
                            MaxNumberOfCats = 1,
                            MinCount = 1,
                            MinNumberOfCats = 1,
                            PriceEur = 30.0,
                            PriceKc = 700.0
                        },
                        new
                        {
                            Id = 2,
                            ExhibitionId = 1,
                            MaxCount = 2,
                            MaxNumberOfCats = 1,
                            MinCount = 2,
                            MinNumberOfCats = 1,
                            PriceEur = 50.0,
                            PriceKc = 1200.0
                        },
                        new
                        {
                            Id = 3,
                            ExhibitionId = 1,
                            MaxCount = 2,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 1,
                            MinNumberOfCats = 1,
                            PriceEur = 0.0,
                            PriceKc = 0.0
                        },
                        new
                        {
                            Id = 4,
                            ExhibitionId = 1,
                            MaxCount = 1,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 1,
                            MinNumberOfCats = 1,
                            PriceEur = 25.0,
                            PriceKc = 600.0
                        },
                        new
                        {
                            Id = 5,
                            ExhibitionId = 1,
                            MaxCount = 2,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 2,
                            MinNumberOfCats = 1,
                            PriceEur = 40.0,
                            PriceKc = 1000.0
                        },
                        new
                        {
                            Id = 6,
                            ExhibitionId = 1,
                            MaxCount = 1,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 1,
                            MinNumberOfCats = 1,
                            PriceEur = 35.0,
                            PriceKc = 800.0
                        },
                        new
                        {
                            Id = 7,
                            ExhibitionId = 1,
                            MaxCount = 2,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 2,
                            MinNumberOfCats = 1,
                            PriceEur = 60.0,
                            PriceKc = 1400.0
                        },
                        new
                        {
                            Id = 8,
                            ExhibitionId = 1,
                            MaxCount = 1,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 1,
                            MinNumberOfCats = 1,
                            PriceEur = 60.0,
                            PriceKc = 400.0
                        },
                        new
                        {
                            Id = 9,
                            ExhibitionId = 1,
                            MaxCount = 2,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 2,
                            MinNumberOfCats = 1,
                            PriceEur = 60.0,
                            PriceKc = 700.0
                        },
                        new
                        {
                            Id = 10,
                            ExhibitionId = 1,
                            MaxCount = 1,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 1,
                            MinNumberOfCats = 3,
                            PriceEur = 50.0,
                            PriceKc = 600.0
                        },
                        new
                        {
                            Id = 11,
                            ExhibitionId = 1,
                            MaxCount = 2,
                            MaxNumberOfCats = 2147483647,
                            MinCount = 2,
                            MinNumberOfCats = 3,
                            PriceEur = 50.0,
                            PriceKc = 900.0
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("North")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("South")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Palackého třída 126",
                            North = "49.240069",
                            South = "16.591739"
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ManyToManyMapper<LogMeIn.Models.Models.CatRegistration>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("CatManyToManyMappers");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ManyToManyMapper<LogMeIn.Models.Models.FeeEntranceDetail>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("ManyToManyFeeEntrance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeId = 1,
                            GroupId = "1"
                        },
                        new
                        {
                            Id = 2,
                            AttributeId = 1,
                            GroupId = "3"
                        },
                        new
                        {
                            Id = 3,
                            AttributeId = 1,
                            GroupId = "5"
                        },
                        new
                        {
                            Id = 4,
                            AttributeId = 1,
                            GroupId = "7"
                        },
                        new
                        {
                            Id = 5,
                            AttributeId = 1,
                            GroupId = "9"
                        },
                        new
                        {
                            Id = 6,
                            AttributeId = 1,
                            GroupId = "2"
                        },
                        new
                        {
                            Id = 7,
                            AttributeId = 1,
                            GroupId = "4"
                        },
                        new
                        {
                            Id = 8,
                            AttributeId = 1,
                            GroupId = "6"
                        },
                        new
                        {
                            Id = 9,
                            AttributeId = 1,
                            GroupId = "8"
                        },
                        new
                        {
                            Id = 10,
                            AttributeId = 1,
                            GroupId = "10"
                        },
                        new
                        {
                            Id = 11,
                            AttributeId = 1,
                            GroupId = "11"
                        },
                        new
                        {
                            Id = 12,
                            AttributeId = 1,
                            GroupId = "12"
                        },
                        new
                        {
                            Id = 13,
                            AttributeId = 2,
                            GroupId = "1"
                        },
                        new
                        {
                            Id = 14,
                            AttributeId = 2,
                            GroupId = "3"
                        },
                        new
                        {
                            Id = 15,
                            AttributeId = 2,
                            GroupId = "5"
                        },
                        new
                        {
                            Id = 16,
                            AttributeId = 2,
                            GroupId = "7"
                        },
                        new
                        {
                            Id = 17,
                            AttributeId = 2,
                            GroupId = "9"
                        },
                        new
                        {
                            Id = 18,
                            AttributeId = 2,
                            GroupId = "2"
                        },
                        new
                        {
                            Id = 19,
                            AttributeId = 2,
                            GroupId = "4"
                        },
                        new
                        {
                            Id = 20,
                            AttributeId = 2,
                            GroupId = "6"
                        },
                        new
                        {
                            Id = 21,
                            AttributeId = 2,
                            GroupId = "8"
                        },
                        new
                        {
                            Id = 22,
                            AttributeId = 2,
                            GroupId = "10"
                        },
                        new
                        {
                            Id = 23,
                            AttributeId = 2,
                            GroupId = "11"
                        },
                        new
                        {
                            Id = 24,
                            AttributeId = 2,
                            GroupId = "12"
                        },
                        new
                        {
                            Id = 25,
                            AttributeId = 3,
                            GroupId = "13a"
                        },
                        new
                        {
                            Id = 26,
                            AttributeId = 3,
                            GroupId = "13b"
                        },
                        new
                        {
                            Id = 27,
                            AttributeId = 3,
                            GroupId = "13c"
                        },
                        new
                        {
                            Id = 28,
                            AttributeId = 4,
                            GroupId = "14"
                        },
                        new
                        {
                            Id = 29,
                            AttributeId = 4,
                            GroupId = "15"
                        },
                        new
                        {
                            Id = 30,
                            AttributeId = 5,
                            GroupId = "14"
                        },
                        new
                        {
                            Id = 31,
                            AttributeId = 5,
                            GroupId = "15"
                        },
                        new
                        {
                            Id = 32,
                            AttributeId = 6,
                            GroupId = "16"
                        },
                        new
                        {
                            Id = 33,
                            AttributeId = 7,
                            GroupId = "16"
                        },
                        new
                        {
                            Id = 34,
                            AttributeId = 8,
                            GroupId = "17"
                        },
                        new
                        {
                            Id = 35,
                            AttributeId = 9,
                            GroupId = "17"
                        },
                        new
                        {
                            Id = 36,
                            AttributeId = 10,
                            GroupId = "0"
                        },
                        new
                        {
                            Id = 37,
                            AttributeId = 10,
                            GroupId = "1"
                        },
                        new
                        {
                            Id = 38,
                            AttributeId = 10,
                            GroupId = "2"
                        },
                        new
                        {
                            Id = 39,
                            AttributeId = 10,
                            GroupId = "3"
                        },
                        new
                        {
                            Id = 40,
                            AttributeId = 10,
                            GroupId = "4"
                        },
                        new
                        {
                            Id = 41,
                            AttributeId = 10,
                            GroupId = "5"
                        },
                        new
                        {
                            Id = 42,
                            AttributeId = 10,
                            GroupId = "6"
                        },
                        new
                        {
                            Id = 43,
                            AttributeId = 10,
                            GroupId = "7"
                        },
                        new
                        {
                            Id = 44,
                            AttributeId = 10,
                            GroupId = "8"
                        },
                        new
                        {
                            Id = 45,
                            AttributeId = 10,
                            GroupId = "9"
                        },
                        new
                        {
                            Id = 46,
                            AttributeId = 10,
                            GroupId = "10"
                        },
                        new
                        {
                            Id = 47,
                            AttributeId = 10,
                            GroupId = "11"
                        },
                        new
                        {
                            Id = 48,
                            AttributeId = 10,
                            GroupId = "12"
                        },
                        new
                        {
                            Id = 49,
                            AttributeId = 10,
                            GroupId = "13a"
                        },
                        new
                        {
                            Id = 50,
                            AttributeId = 10,
                            GroupId = "13b"
                        },
                        new
                        {
                            Id = 51,
                            AttributeId = 10,
                            GroupId = "13c"
                        },
                        new
                        {
                            Id = 52,
                            AttributeId = 10,
                            GroupId = "14"
                        },
                        new
                        {
                            Id = 53,
                            AttributeId = 10,
                            GroupId = "15"
                        },
                        new
                        {
                            Id = 54,
                            AttributeId = 10,
                            GroupId = "16"
                        },
                        new
                        {
                            Id = 55,
                            AttributeId = 10,
                            GroupId = "17"
                        },
                        new
                        {
                            Id = 56,
                            AttributeId = 11,
                            GroupId = "0"
                        },
                        new
                        {
                            Id = 57,
                            AttributeId = 11,
                            GroupId = "1"
                        },
                        new
                        {
                            Id = 58,
                            AttributeId = 11,
                            GroupId = "2"
                        },
                        new
                        {
                            Id = 59,
                            AttributeId = 11,
                            GroupId = "3"
                        },
                        new
                        {
                            Id = 60,
                            AttributeId = 11,
                            GroupId = "4"
                        },
                        new
                        {
                            Id = 61,
                            AttributeId = 11,
                            GroupId = "5"
                        },
                        new
                        {
                            Id = 62,
                            AttributeId = 11,
                            GroupId = "6"
                        },
                        new
                        {
                            Id = 63,
                            AttributeId = 11,
                            GroupId = "7"
                        },
                        new
                        {
                            Id = 64,
                            AttributeId = 11,
                            GroupId = "8"
                        },
                        new
                        {
                            Id = 65,
                            AttributeId = 11,
                            GroupId = "9"
                        },
                        new
                        {
                            Id = 66,
                            AttributeId = 11,
                            GroupId = "10"
                        },
                        new
                        {
                            Id = 67,
                            AttributeId = 11,
                            GroupId = "11"
                        },
                        new
                        {
                            Id = 68,
                            AttributeId = 11,
                            GroupId = "12"
                        },
                        new
                        {
                            Id = 69,
                            AttributeId = 11,
                            GroupId = "13a"
                        },
                        new
                        {
                            Id = 70,
                            AttributeId = 11,
                            GroupId = "13b"
                        },
                        new
                        {
                            Id = 71,
                            AttributeId = 11,
                            GroupId = "13c"
                        },
                        new
                        {
                            Id = 72,
                            AttributeId = 11,
                            GroupId = "14"
                        },
                        new
                        {
                            Id = 73,
                            AttributeId = 11,
                            GroupId = "15"
                        },
                        new
                        {
                            Id = 74,
                            AttributeId = 11,
                            GroupId = "16"
                        },
                        new
                        {
                            Id = 75,
                            AttributeId = 11,
                            GroupId = "17"
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PersonRegistrationId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("Submitted")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonRegistrationId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "KockyBrno@gmail.com",
                            Ico = "03841979",
                            Name = "Kočky Brno",
                            PlaceId = 1,
                            TelNumber = "420 604 954 118",
                            Website = "https://www.kockybrno.cz/"
                        });
                });

            modelBuilder.Entity("LogMeIn.Models.Models.PersonRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Draft")
                        .HasColumnType("bit");

                    b.Property<string>("ExhibiterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExhibiterId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("PersonRegistrations");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.CatRegistration, LogMeIn.Models.Models.Fee, bool>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<bool>("bought")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("CatFees");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.Day<LogMeIn.Models.Models.CatRegistration>, LogMeIn.Models.Models.Fee, bool>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<bool>("bought")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("StoredFees<Day<CatRegistration>, Fee, bool>");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.PersonRegistration, LogMeIn.Models.Models.EnumFee, int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("bought")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("EnumStoredFees");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.PersonRegistration, LogMeIn.Models.Models.Fee, bool>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeeId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<bool>("bought")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PersonFees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ExhibitedCat", b =>
                {
                    b.HasBaseType("LogMeIn.Models.Models.Cat");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BreederId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FatherId")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<bool>("IsHomeCat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameAsExhibitor")
                        .HasColumnType("bit");

                    b.Property<int?>("MotherId")
                        .HasColumnType("int");

                    b.Property<bool>("Neutered")
                        .HasColumnType("bit");

                    b.HasIndex("BreederId")
                        .IsUnique()
                        .HasFilter("[BreederId] IS NOT NULL");

                    b.HasIndex("FatherId")
                        .IsUnique()
                        .HasFilter("[FatherId] IS NOT NULL");

                    b.HasIndex("MotherId")
                        .IsUnique()
                        .HasFilter("[MotherId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ExhibitedCat");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.CatRegistration", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.ExhibitedCat", "Cat")
                        .WithOne("CatRegistration")
                        .HasForeignKey("LogMeIn.Models.Models.CatRegistration", "CatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.PersonRegistration", "PersonRegistration")
                        .WithMany("CatRegistrations")
                        .HasForeignKey("PersonRegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cat");

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Day<LogMeIn.Models.Models.CatRegistration>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.CatRegistration", "Registration")
                        .WithMany("AttendanceOnDays")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.EnumFee", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Exhibition", "WExhibition")
                        .WithMany("EnumFees")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WExhibition");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.EnumRecord", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.EnumFee", "Fee")
                        .WithMany("FeeRecords")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Exhibition", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.Organization", "Organization")
                        .WithMany("Exhibitions")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Fee", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Exhibition", "Exhibition")
                        .WithMany("Fees")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.FeeDetail", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Fee", "Fee")
                        .WithMany("FeeDetails")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.FeeEntranceDetail", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Exhibition", "Exhibition")
                        .WithMany("Price")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ManyToManyMapper<LogMeIn.Models.Models.CatRegistration>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.CatRegistration", "Attribute")
                        .WithMany("SelectedGroups")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ManyToManyMapper<LogMeIn.Models.Models.FeeEntranceDetail>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.FeeEntranceDetail", "Attribute")
                        .WithMany("ExhibitedGroup")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Order", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.PersonRegistration", "PersonRegistration")
                        .WithOne("Order")
                        .HasForeignKey("LogMeIn.Models.Models.Order", "PersonRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonRegistration");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Organization", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Location", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.PersonRegistration", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.ApplicationUser", "Exhibiter")
                        .WithMany("PersonRegistrations")
                        .HasForeignKey("ExhibiterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.Exhibition", "Exhibition")
                        .WithMany("DaysPersonRegistrations")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibiter");

                    b.Navigation("Exhibition");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.CatRegistration, LogMeIn.Models.Models.Fee, bool>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.CatRegistration", "Registration")
                        .WithMany("CompleteFees")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.Day<LogMeIn.Models.Models.CatRegistration>, LogMeIn.Models.Models.Fee, bool>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.Day<LogMeIn.Models.Models.CatRegistration>", "Registration")
                        .WithMany("DayFees")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.PersonRegistration, LogMeIn.Models.Models.EnumFee, int>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.EnumFee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.PersonRegistration", "Registration")
                        .WithMany("PersonEnumFee")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.StoredFees<LogMeIn.Models.Models.PersonRegistration, LogMeIn.Models.Models.Fee, bool>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Fee", "Fee")
                        .WithMany()
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.PersonRegistration", "Registration")
                        .WithMany("CompleteFees")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ExhibitedCat", b =>
                {
                    b.HasOne("LogMeIn.Models.Models.Breeder", "Breeder")
                        .WithOne()
                        .HasForeignKey("LogMeIn.Models.Models.ExhibitedCat", "BreederId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogMeIn.Models.Models.Cat", "Father")
                        .WithOne()
                        .HasForeignKey("LogMeIn.Models.Models.ExhibitedCat", "FatherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("LogMeIn.Models.Models.Cat", "Mother")
                        .WithOne()
                        .HasForeignKey("LogMeIn.Models.Models.ExhibitedCat", "MotherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Breeder");

                    b.Navigation("Father");

                    b.Navigation("Mother");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ApplicationUser", b =>
                {
                    b.Navigation("PersonRegistrations");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.CatRegistration", b =>
                {
                    b.Navigation("AttendanceOnDays");

                    b.Navigation("CompleteFees");

                    b.Navigation("SelectedGroups");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Day<LogMeIn.Models.Models.CatRegistration>", b =>
                {
                    b.Navigation("DayFees");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.EnumFee", b =>
                {
                    b.Navigation("FeeRecords");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Exhibition", b =>
                {
                    b.Navigation("DaysPersonRegistrations");

                    b.Navigation("EnumFees");

                    b.Navigation("Fees");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Fee", b =>
                {
                    b.Navigation("FeeDetails");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.FeeEntranceDetail", b =>
                {
                    b.Navigation("ExhibitedGroup");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.Organization", b =>
                {
                    b.Navigation("Exhibitions");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.PersonRegistration", b =>
                {
                    b.Navigation("CatRegistrations");

                    b.Navigation("CompleteFees");

                    b.Navigation("Order");

                    b.Navigation("PersonEnumFee");
                });

            modelBuilder.Entity("LogMeIn.Models.Models.ExhibitedCat", b =>
                {
                    b.Navigation("CatRegistration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
